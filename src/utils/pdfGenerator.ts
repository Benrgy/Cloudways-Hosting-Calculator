
interface PDFReportData {
  inputs: any;
  results: any;
  userProfile?: any;
  timestamp: string;
}

export const generatePDFReport = async (data: PDFReportData): Promise<Blob> => {
  // In a real implementation, you would use a PDF library like jsPDF or Puppeteer
  // For now, we'll create a simple HTML-based approach that could be converted to PDF
  
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Cloudways Hosting Analysis Report</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
        .header { text-align: center; border-bottom: 2px solid #10B981; padding-bottom: 20px; margin-bottom: 30px; }
        .section { margin-bottom: 30px; }
        .metric { display: inline-block; margin: 10px 20px; text-align: center; }
        .metric-value { font-size: 24px; font-weight: bold; color: #10B981; }
        .metric-label { font-size: 12px; color: #666; }
        .table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .table th, .table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        .table th { background-color: #f8f9fa; }
        .recommendation { background-color: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .footer { text-align: center; margin-top: 40px; font-size: 12px; color: #666; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Cloudways Hosting Analysis Report</h1>
        <p>Generated on ${new Date(data.timestamp).toLocaleDateString()}</p>
        ${data.userProfile ? `<p>Prepared for: ${data.userProfile.full_name || data.userProfile.email}</p>` : ''}
      </div>

      <div class="section">
        <h2>Executive Summary</h2>
        <div class="metric">
          <div class="metric-value">$${data.results.monthlySavings?.toFixed(0) || '0'}</div>
          <div class="metric-label">Monthly Savings</div>
        </div>
        <div class="metric">
          <div class="metric-value">$${data.results.annualSavings?.toFixed(0) || '0'}</div>
          <div class="metric-label">Annual Savings</div>
        </div>
        <div class="metric">
          <div class="metric-value">${data.results.savingsPercentage?.toFixed(1) || '0'}%</div>
          <div class="metric-label">Cost Reduction</div>
        </div>
      </div>

      <div class="recommendation">
        <h3>Recommended Plan</h3>
        <h4>${data.results.recommendedPlan}</h4>
        <p>Monthly Cost: <strong>$${data.results.cloudwaysCost}</strong></p>
        <p>This plan is optimized for your current requirements and provides the best value for your hosting needs.</p>
      </div>

      <div class="section">
        <h2>Current vs Recommended Comparison</h2>
        <table class="table">
          <tr>
            <th>Aspect</th>
            <th>Current Setup</th>
            <th>Cloudways Recommended</th>
            <th>Improvement</th>
          </tr>
          <tr>
            <td>Monthly Cost</td>
            <td>$${data.inputs.monthlyHostingCost}</td>
            <td>$${data.results.cloudwaysCost}</td>
            <td class="metric-value">-$${data.results.monthlySavings?.toFixed(0)}</td>
          </tr>
          <tr>
            <td>Storage</td>
            <td>${data.inputs.storageGB} GB</td>
            <td>Optimized allocation</td>
            <td>✓ Right-sized</td>
          </tr>
          <tr>
            <td>Bandwidth</td>
            <td>${data.inputs.bandwidthGB} GB</td>
            <td>Sufficient allocation</td>
            <td>✓ Covered</td>
          </tr>
        </table>
      </div>

      <div class="section">
        <h2>Technical Specifications</h2>
        <ul>
          <li><strong>Storage:</strong> ${data.inputs.storageGB} GB</li>
          <li><strong>Bandwidth:</strong> ${data.inputs.bandwidthGB} GB/month</li>
          <li><strong>Monthly Traffic:</strong> ${data.inputs.monthlyTraffic?.toLocaleString()} visitors</li>
          <li><strong>Current Response Time:</strong> ${data.inputs.responseTimeMS} ms</li>
        </ul>
      </div>

      <div class="footer">
        <p>This report was generated by the Cloudways Savings Calculator</p>
        <p>For questions or assistance, please contact our support team</p>
      </div>
    </body>
    </html>
  `;

  // Convert HTML to Blob (in a real app, you'd use a proper PDF generation library)
  const blob = new Blob([htmlContent], { type: 'text/html' });
  return blob;
};

export const downloadPDFReport = async (data: PDFReportData, filename?: string) => {
  try {
    const pdfBlob = await generatePDFReport(data);
    const url = URL.createObjectURL(pdfBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename || `cloudways-analysis-${new Date().toISOString().split('T')[0]}.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    return { success: true };
  } catch (error) {
    console.error('PDF generation failed:', error);
    return { success: false, error };
  }
};
